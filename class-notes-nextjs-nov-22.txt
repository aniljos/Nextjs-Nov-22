Introduction: https://forms.gle/XR6KErVjTDBQdcgo6
Quiz 1: https://forms.gle/nncFSjr7MJRVukuo8
Quiz 2: https://forms.gle/tRdLSoW3asaVBTdN7


React CDN: https://legacy.reactjs.org/docs/cdn-links.html

Babel Standalone: https://cdnjs.com/libraries/babel-standalone

Git Repository for Mock API: https://github.com/aniljos/REST-API-Mock
Git Repository for Class work: https://github.com/aniljos/Nextjs-Nov-22

nextjs version: 14.2.18


Typescript

1. Complied, statically types
2. 

React & Angular

1. Perfomance(UI rendering)
2. React-library, Angular-framework

Any JS library

1. Download the .js file
2. CDN 
3. Install using npm or any other package manager(yarn, pnpm)


Project Structure

1. package.json: npm configuration file	
		-production deps, development deps
		-scripts
2. node_modules: folder where all dependencies are installed
3. tsconfig.json: typescript config 
4. .eslintrc.json: Linter config
5. next.config.mjs: Next.js config
		- API routes, middleware
		- React config: compiler, 
		- Micro-frontend 
6. src: optional source folder	
			-all the source code resides here
7. app: folder for the App Router(navigation)
8. pages: folder for the Pages Router(navigation)
9. layout.tsx: Root component that defines app layout
10.page.tsx: component rendered on the home route(http://localhost:3000)


Components
	-functional or class
	- classified : client or server
			client : rendered on the client(browser)
			server : rendered on the server(web server)
			Nextjs App Router: the default is server component
				- to create client component use the directive 'use client'
			Nextjs Pages Router: the default is client component

Component props
	- Creational parameters similar to HTML attributes
			- <input type="password" id="prdName"/>
			- <Message text="Hello React" color="blue"/>
	-props : is always an object
			- <Message text="Hello React" color="blue"/>
				-props.text, props.color
		
		
Component state
	- state has to be treated as immutable
		-  to change, create a copy of state, make changes to the copy, reset the state with the copy.
		-  immutable library
		-  reducer pattern, useReducer(hook)
	- state updates are asynchronous
	- state updates are batched(React 18)
			- the rerender is one per event
			
				count ==> 10
			 setCounter(counter + 1);  ==> setCounter(11);
			 setCounter(counter + 1);  ==> setCounter(11);
			 
			setCounter(pValue => pValue + 1);  ==> setCounter(invoke the callback)
			setCounter(pValue => pValue + 1);  ==> setCounter(invoke the callback)
			 
	- signature
		- setState(updateValue)
		- setState(callback) : callback signature (previousValue) => updatedValue
		
Component lifecycle
	-mounted
		- Async tasks(API callback, timer)
		- DOM initializations - focus, addding listeners(window, document)
	-unmounted
		- cleanup
		- canceling API call
		- DOM remove events listeners
	-useEffect is a hook to implement the lifecycle 
		- signature: useEffect(setup method, [dependencies])
		- mounted: useEffect(setup method, [empty dependency array])
		- unmounting: in the setup method of mount return a callback.
		
		
CSS
	- define layout & look and feel
	- react or nextjs does not provide any css classes/layouts
	
	- apply css	
		- class
		- style 
	
Routing
	- Creating navigational applications
	- Client-side routing
	- Single page application
	- React has not api's for routing
		- Use other libraries
		- Nextjs has a routing library
		- CRA or Vite uses "react router dom" library
		
Forms
	- controlled input	
		- useState to create a state, bind the state with the input(value & onChange)
		- reactive
	- uncontrolled input	
		- useRef to create a mutable reference.
		- A refrence to an http element(div, input...)
			- the same reference when we use a document.getElementById()
		
		
		
		
API calls
	- XMLHttpRequest(xhr) & fetch - inbuilt in the browser
	- axios & fetch are promise based
	- Promise is like proxy
		-then method to handle the proxy
			- 100(information), 200(Success), 300(redirect) 
			- 400(client error), 500(server error)
		-async & await
			-keywords from ES6/7
			- handle a promise in a synchronized way
			

Excercise/ Assignment: Complete the EditProductPage

   1. Fetch the product details from the API
		-GET http://localhost:9000/products/[id]
   2. Controlled input
        - state and bind to the input fields
   3. ACtions
		Save: save the data the server: PUT http://localhost:9000/products/[id]  product, navigate back to /producst route
		Cancel: navigate back to /producst route
		
State Management
	-server: not recommened
	-client: more scalable
		- localStorage
		- sessionStorage
		
		- memory: redux, react context
		
Redux
	-action: an object
		- {type: "login", token:"abc"}
		- {type: "logout"}
	-reducer: a function, receives the action, update the store
	- libraries
		- redux
		- @reduxjs/toolkit - high level api
		- react-redux - integrates redux with react
		- npm i @reduxjs/toolkit react-redux
		
			


		
